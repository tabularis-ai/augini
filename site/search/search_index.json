{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#build-and-enhance-custom-datasets-for-your-use-case","title":"Build and Enhance Custom Datasets for your Use Case","text":""},{"location":"#ai-powered-tabular-data-augmentation-generation-labeling-and-anonymization","title":"AI-Powered Tabular Data Augmentation, Generation, Labeling, and Anonymization","text":"<p><code>augini</code> is a versatile Python framework that leverages AI for comprehensive data manipulation. It uses large language models to augment, generate, and anonymize tabular data, creating realistic and privacy-preserving datasets.</p>"},{"location":"#data-augmentation","title":"Data Augmentation:","text":"<ul> <li>Enhance existing datasets with AI-generated features</li> <li>Add contextual information based on current data</li> <li>Infuse domain knowledge from LLMs</li> </ul>"},{"location":"#synthetic-data-generation-and-extantion","title":"Synthetic Data Generation and Extantion:","text":"<ul> <li>Create entirely new, realistic datasets</li> <li>Maintain statistical properties of original data</li> <li>Generate diverse, coherent synthetic profiles</li> </ul>"},{"location":"#data-anonymization","title":"Data Anonymization:","text":"<ul> <li>Implement k-anonymity and l-diversity</li> <li>Generate synthetic identifiers</li> <li>Balance privacy and data utility</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li>Augment ML training datasets</li> <li>Generate privacy-safe data for sharing</li> <li>Automatic labeling using state-of-the-art AI models </li> <li>Create synthetic data for software testing</li> <li>Develop realistic scenarios for business planning</li> <li>Produce diverse datasets for research and education</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install Augini using pip:</p> <pre><code>pip install augini\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here's a simple example of how to use Augini:</p> <pre><code>from augini import Augini\nimport pandas as pd\n\napi_key = \"OpenAI or OpenRouter token\"\n\n# OpenAI\naugini = Augini(api_key=api_key,  model='gpt-4-turbo', use_openrouter=False)\n\n# OpenRouter \naugini = Augini(api_key=api_key, use_openrouter=True, model='meta-llama/llama-3-8b-instruct')\n\n# Create a sample DataFrame\ndata = {\n    'Place of Birth': ['New York', 'London', 'Tokyo'],\n    'Age': [30, 25, 40],\n    'Gender': ['Male', 'Female', 'Male']\n}\ndf = pd.DataFrame(data)\n\n# Add synthetic features\nresult_df = augini.augment_columns(df, ['NAME', 'OCCUPATION', 'FAVORITE_DRINK'])\n\nprint(result_df)\n</code></pre>"},{"location":"#contact-us","title":"Contact us","text":"<ul> <li>info@tabularis.ai</li> </ul>"},{"location":"Learn%20Augini/What%20is%20Augini%20about/","title":"What is Augini about?","text":"<p>Augini enables synthetic data generation in an easy to use interface.</p> <p>Some datasets are hard to get access to. Synthetic data generation allows one to run quick experiments on datasets that are very similar to ground truth. </p> <p>The tool currently exposes three easy to use interfaces/methods to get to work quickly.</p>"},{"location":"Learn%20Augini/What%20is%20Augini%20about/#user-facing-methods","title":"User-Facing Methods:","text":""},{"location":"Learn%20Augini/What%20is%20Augini%20about/#augment_columns","title":"<code>augment_columns</code>:","text":"<p>Purpose: This method is used to augment (add new synthetic data to) specific columns in a DataFrame.</p> <p>Usage: Users can specify which columns they want to augment and optionally provide a custom prompt. The method can either use asynchronous or synchronous processing.</p> <p>Example:</p> <pre><code>augmented_df = augini_instance.augment_columns(df, columns=[\"column1\", \"column2\"], custom_prompt=\"Custom prompt here\", use_sync=False)\naugment_single:\n</code></pre>"},{"location":"Learn%20Augini/What%20is%20Augini%20about/#augment_single","title":"<code>augment_single</code>:","text":"<p>Purpose: This method is used to augment a single column in a DataFrame.</p> <p>Usage: Similar to augment_columns, but specifically for a single column. Users can provide a custom prompt and choose between asynchronous or synchronous processing.</p> <p>Example:</p> <pre><code>augmented_df = augini_instance.augment_single(df, column_name=\"column1\", custom_prompt=\"Custom prompt here\", use_sync=False)\n</code></pre>"},{"location":"Learn%20Augini/What%20is%20Augini%20about/#chat","title":"<code>chat</code>:","text":"<p>Purpose: This method allows users to ask natural language questions about a DataFrame and receive AI-generated responses.</p> <p>Usage: Users provide a query and the DataFrame, and the method returns an AI-generated answer based on the DataFrame's context.</p> <p>Example:</p> <pre><code>response = augini_instance.chat(query=\"What is the average age in the DataFrame?\", df=df)\nprint(response)\n</code></pre>"},{"location":"Learn%20Augini/What%20is%20Augini%20about/#chat-oriented-methods","title":"Chat oriented methods:","text":""},{"location":"Learn%20Augini/What%20is%20Augini%20about/#get_conversation_history","title":"<code>get_conversation_history</code>:","text":"<p>Purpose: Retrieves the conversation history in either 'full' or 'summary' mode.</p> <p>Example:</p> <pre><code>full_history = augini_instance.get_conversation_history(mode='full')\nsummary_history = augini_instance.get_conversation_history(mode='summary')\n</code></pre>"},{"location":"Learn%20Augini/What%20is%20Augini%20about/#clear_conversation_history","title":"<code>clear_conversation_history</code>:","text":"<p>Purpose:Clears the conversation history based on the specified mode.</p> <p>Example:</p> <pre><code># Clear full conversation history\naugini_instance.clear_conversation_history(mode='full')\n\n# Clear summarized context histories\naugini_instance.clear_conversation_history(mode='summary')\n\n# Clear both\naugini_instance.clear_conversation_history(mode='all')\n</code></pre> <p>Summaries aid speed and reduce the cost of api queries ensuring that only contextually relevant information is used in any query.</p>"}]}